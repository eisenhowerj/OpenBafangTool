name: Security & Dependencies

on:
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
  push:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'release/app/package.json'

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "## Main Dependencies Security Audit" >> security-report.md
          npm audit --audit-level moderate || echo "Security issues found in main dependencies" >> security-report.md
          
          echo -e "\n## App Dependencies Security Audit" >> security-report.md
          cd release/app
          npm audit --audit-level moderate || echo "Security issues found in app dependencies" >> security-report.md

      - name: Check for outdated packages
        run: |
          echo -e "\n## Outdated Main Dependencies" >> security-report.md
          npm outdated || echo "Some packages are outdated" >> security-report.md
          
          echo -e "\n## Outdated App Dependencies" >> security-report.md
          cd release/app
          npm outdated || echo "Some app packages are outdated" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check for dependency vulnerabilities
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'push'

  license-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          echo "# License Report" > license-report.md
          echo "Generated on: $(date)" >> license-report.md
          echo "" >> license-report.md
          
          echo "## Main Dependencies" >> license-report.md
          license-checker --onlyAllow 'MIT;ISC;BSD;Apache-2.0;CC0-1.0;Unlicense' --markdown >> license-report.md || echo "Some licenses need review" >> license-report.md
          
          echo -e "\n## App Dependencies" >> license-report.md
          cd release/app
          license-checker --onlyAllow 'MIT;ISC;BSD;Apache-2.0;CC0-1.0;Unlicense' --markdown >> ../license-report.md || echo "Some app licenses need review" >> ../license-report.md

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.md
          retention-days: 30

  build-size-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install app dependencies
        run: |
          cd release/app
          npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "# Bundle Size Report" > size-report.md
          echo "Generated on: $(date)" >> size-report.md
          echo "" >> size-report.md
          
          echo "## Build Output Sizes" >> size-report.md
          echo "\`\`\`" >> size-report.md
          du -sh dist/* | sort -hr >> size-report.md
          echo "\`\`\`" >> size-report.md
          
          echo -e "\n## Detailed File Sizes" >> size-report.md
          echo "\`\`\`" >> size-report.md
          find dist -type f -name "*.js" -o -name "*.css" | xargs ls -lh | sort -k5 -hr >> size-report.md
          echo "\`\`\`" >> size-report.md

      - name: Upload size report
        uses: actions/upload-artifact@v4
        with:
          name: size-report
          path: size-report.md
          retention-days: 30

  create-summary:
    needs: [security-audit, license-check, build-size-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Create summary issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let issueBody = `# Weekly Security & Dependencies Report\n\n`;
            issueBody += `Generated on: ${new Date().toISOString()}\n\n`;
            
            // Read security report if available
            try {
              const securityReport = fs.readFileSync('reports/security-report/security-report.md', 'utf8');
              issueBody += `## Security Audit\n${securityReport}\n\n`;
            } catch (e) {
              issueBody += `## Security Audit\nReport not available\n\n`;
            }
            
            // Read license report if available
            try {
              const licenseReport = fs.readFileSync('reports/license-report/license-report.md', 'utf8');
              issueBody += `## License Check\n${licenseReport}\n\n`;
            } catch (e) {
              issueBody += `## License Check\nReport not available\n\n`;
            }
            
            // Read size report if available
            try {
              const sizeReport = fs.readFileSync('reports/size-report/size-report.md', 'utf8');
              issueBody += `## Bundle Size Analysis\n${sizeReport}\n\n`;
            } catch (e) {
              issueBody += `## Bundle Size Analysis\nReport not available\n\n`;
            }
            
            issueBody += `---\n*This report was generated automatically by GitHub Actions*`;
            
            // Create or update issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies', 'security'],
              state: 'open'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title.includes('Weekly Security & Dependencies Report')
            );
            
            if (existingIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: issueBody
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Weekly Security & Dependencies Report - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['dependencies', 'security', 'automated']
              });
            }