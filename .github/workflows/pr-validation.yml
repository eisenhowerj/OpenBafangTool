name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install app dependencies
        run: |
          cd release/app
          npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Check for build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed - dist directory not found"
            exit 1
          fi
          echo "‚úÖ Build successful - dist directory created"

      - name: Test packaging (Linux only for speed)
        run: |
          # Quick packaging test to ensure electron-builder config is valid
          timeout 300 npm run package || {
            echo "‚ùå Packaging test failed or timed out"
            exit 1
          }
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Check bundle size
        run: |
          # Create size report for PR
          echo "## Bundle Size Analysis" > pr-size-report.md
          echo "" >> pr-size-report.md
          echo "### Main Bundle Files" >> pr-size-report.md
          echo "\`\`\`" >> pr-size-report.md
          find dist -name "*.js" -o -name "*.css" | xargs ls -lh | head -20 >> pr-size-report.md
          echo "\`\`\`" >> pr-size-report.md
          
          echo "" >> pr-size-report.md
          echo "### Total Sizes" >> pr-size-report.md
          echo "\`\`\`" >> pr-size-report.md
          du -sh dist >> pr-size-report.md
          echo "\`\`\`" >> pr-size-report.md

      - name: Comment PR with build info
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = `## üîç Pull Request Build Summary\n\n`;
            comment += `### ‚úÖ Build Status\n`;
            comment += `- **Linting**: ‚úÖ Passed\n`;
            comment += `- **Tests**: ‚úÖ Passed\n`;
            comment += `- **Build**: ‚úÖ Successful\n`;
            comment += `- **Packaging**: ‚úÖ Validated\n\n`;
            
            // Add size report if available
            try {
              const sizeReport = fs.readFileSync('pr-size-report.md', 'utf8');
              comment += sizeReport + '\n\n';
            } catch (e) {
              comment += `### Bundle Size\nSize analysis not available\n\n`;
            }
            
            comment += `### üì¶ Ready for Release\n`;
            comment += `This PR has passed all validation checks and can be safely merged.\n\n`;
            comment += `---\n`;
            comment += `*Generated by GitHub Actions on ${new Date().toISOString()}*`;
            
            // Find existing comment to update
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Pull Request Build Summary')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  security-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level high || {
            echo "‚ùå High severity vulnerabilities found"
            echo "Please run 'npm audit fix' to resolve security issues"
            exit 1
          }
          echo "‚úÖ No high severity vulnerabilities found"

      - name: Check for sensitive files
        run: |
          # Check for common sensitive file patterns
          SENSITIVE_FILES=$(find . -name "*.pem" -o -name "*.key" -o -name "*.p12" -o -name ".env" -o -name "*.env" | grep -v node_modules || true)
          
          if [ ! -z "$SENSITIVE_FILES" ]; then
            echo "‚ùå Potential sensitive files found:"
            echo "$SENSITIVE_FILES"
            echo "Please ensure these files are not committed or are properly secured"
            exit 1
          fi
          
          echo "‚úÖ No sensitive files detected"

  cross-platform-test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev

      - name: Install dependencies
        run: npm ci

      - name: Install app dependencies
        run: |
          cd release/app
          npm ci

      - name: Build application
        run: npm run build

      - name: Verify cross-platform compatibility
        run: |
          echo "‚úÖ Build successful on ${{ matrix.os }}"
          
          # Check that main files exist
          if [ ! -f "dist/main/main.js" ]; then
            echo "‚ùå Main process file missing"
            exit 1
          fi
          
          echo "‚úÖ All required files present"